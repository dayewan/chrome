function getCurrentTabId(callback) {
  chrome.tabs.query({
    active: true,
    currentWindow: true
  }, function (tabs) {
    if (callback) callback(tabs.length ? tabs[0].id : null);
  });
}

function setRed(tabId) {
  chrome.tabs.executeScript(tabId, {
    file: 'js/getProductInfo.js'
  });
}

function get_suffix(filename) {
  let fileArr = filename.split('/');
  return '.' + fileArr[1];
}

class App extends React.Component {
  constructor(props) {
    super(props);
    const propsData = props.all;
    let imageList = propsData.banner.map(function (item, index) {
      if (/^\/\//.test(item)) {
        item = 'https:' + item;
      }

      return {
        check: true,
        src: item,
        name: index + 1
      };
    });
    let detail = propsData.detail.map(function (item, index) {
      if (/^\/\//.test(item)) {
        item = 'https:' + item;
      }

      if (item) {
        return {
          check: true,
          src: item,
          name: index + 100
        };
      }
    }).filter(function (val) {
      return !(!val || val === "");
    });
    let idTxt = [];

    if (propsData.idTxt !== undefined) {
      idTxt = propsData.idTxt.map(function (item, index) {
        return {
          check: false,
          src: item.src,
          name: item.name
        };
      });
    }

    this.state = {
      imageList: imageList,
      title: propsData.title,
      checkAll: true,
      detailImage: detail,
      checkDetailAll: true,
      price: propsData.price,
      sku: propsData.sku,
      link: propsData.link,
      video: propsData.video,
      idTxt: idTxt,
      checkedIds: [],
      aHref: '#',
      checkIdsAll: false
    };
    this.handleCheckAll = this.handleCheckAll.bind(this);
    this.handleDetailCheckAll = this.handleDetailCheckAll.bind(this);
    this.download = this.download.bind(this);
    this.exportTxt = this.exportTxt.bind(this);
    this.handleIdsCheckAll = this.handleIdsCheckAll.bind(this);
    this.handleTitleChange = this.handleTitleChange.bind(this);
  }

  handleTitleChange(e) {
    this.setState({
      title: e.target.value
    });
  }

  handleIdsCheckAll(e) {
    const idTxt = this.state.idTxt;
    const checked = e.target.checked;
    const checkedIds = idTxt.map(function (item) {
      item.check = e.target.checked;
      return item;
    }).filter(function (item) {
      if (item.check) {
        return item;
      }
    }).map(function (item) {
      return item.name;
    });
    console.log(checkedIds);
    this.setState({
      idTxt: idTxt,
      checkIdsAll: checked,
      checkedIds: checkedIds
    });
  }

  exportTxt(e) {
    const checkedIds = this.state.checkedIds;
    const text = checkedIds.join(',');
    let blob = new Blob([text], {
      type: "text/plain;charset=utf-8"
    });
    saveAs(blob, this.state.title + '.txt');
  }

  handleCheckAll(e) {
    const imageList = this.state.imageList;
    const checked = e.target.checked;
    imageList.map(function (item) {
      item.check = e.target.checked;
      return item;
    });
    this.setState({
      imageList: imageList,
      checkAll: checked
    });
  }

  handleDetailCheckAll(e) {
    const imageList = this.state.detailImage;
    const checked = e.target.checked;
    imageList.map(function (item) {
      item.check = e.target.checked;
      return item;
    });
    this.setState({
      detailImage: imageList,
      checkDetailAll: checked
    });
  }

  download() {
    let linkArr = [];
    const imageList = this.state.imageList;
    imageList.map(function (item) {
      if (item.check) {
        linkArr.push(item.src);
      }

      return item.src;
    });

    let _that = this;

    const detailImage = this.state.detailImage;
    detailImage.map(function (item) {
      if (item.check) {
        linkArr.push(item.src);
      }

      return item.src;
    });

    if (this.state.video && this.state.video !== '') {
      linkArr.push(this.state.video);
    }

    Promise.all(linkArr.map(url => fetch(url).then(resp => resp.blob()))).then(blobs => {
      let zip = new JSZip();

      for (let item in blobs) {
        zip.file(String(parseInt(item) + 1) + get_suffix(blobs[item].type), blobs[item], {
          base64: true
        });
      }

      zip.generateAsync({
        type: "blob"
      }).then(function (content) {
        saveAs(content, _that.state.title + ".zip");
      });
    });
  }

  handleCheckChange(index, e) {
    const imageList = this.state.imageList;
    const checked = e.target.checked;
    imageList.map(function (item, selfIndex) {
      if (index === selfIndex) {
        item.check = checked;
      }

      return item;
    });
    const checkAll = imageList.every(function (item) {
      return item.check;
    });
    this.setState({
      imageList: imageList,
      checkAll: checkAll
    });
  }

  handleDetailCheckChange(index, e) {
    const imageList = this.state.detailImage;
    const checked = e.target.checked;
    imageList.map(function (item, selfIndex) {
      if (index === selfIndex) {
        item.check = checked;
      }

      return item;
    });
    const checkAll = imageList.every(function (item) {
      return item.check;
    });
    this.setState({
      detailImage: imageList,
      checkDetailAll: checkAll
    });
  }

  handleIdsCheckChange(index, e) {
    const idTxt = this.state.idTxt;
    const checkedIds = this.state.checkedIds;
    const checked = e.target.checked;
    console.log(checked);
    let checkedIndex = checkedIds.indexOf(idTxt[index].name);
    idTxt.map(function (item, selfIndex) {
      if (index === selfIndex) {
        item.check = checked;
      }

      return item;
    });

    if (checked) {
      if (checkedIndex === -1) {
        checkedIds.push(idTxt[index].name);
      }
    } else {
      console.log(checkedIndex);

      if (checkedIndex !== -1) {
        checkedIds.splice(checkedIndex, 1);
      }
    }

    this.setState({
      checkedIds: checkedIds,
      idTxt: idTxt
    });
  }

  render() {
    const num = this.state.imageList;
    const list = num.map((item, index) => React.createElement("div", {
      className: "col-6",
      key: item.name
    }, React.createElement("div", {
      className: "form-check"
    }, React.createElement("label", {
      className: "form-check-label"
    }, React.createElement("input", {
      type: "checkbox",
      className: "form-check-input",
      checked: item.check,
      onChange: this.handleCheckChange.bind(this, index)
    }), React.createElement("img", {
      src: item.src,
      alt: "",
      width: "100%"
    })))));
    const detail = this.state.detailImage;
    const detailList = detail.map((item, index) => React.createElement("div", {
      className: "col-6",
      key: item.name
    }, React.createElement("div", {
      className: "form-check"
    }, React.createElement("label", {
      className: "form-check-label"
    }, React.createElement("input", {
      type: "checkbox",
      className: "form-check-input",
      checked: item.check,
      onChange: this.handleDetailCheckChange.bind(this, index)
    }), React.createElement("img", {
      src: item.src,
      alt: "",
      width: "100%"
    })))));
    const idTxt = this.state.idTxt;
    const txtList = idTxt.map((item, index) => React.createElement("div", {
      className: "col-6",
      key: item.name
    }, React.createElement("label", {
      className: "form-check-label"
    }, React.createElement("input", {
      type: "checkbox",
      className: "form-check-input",
      checked: item.check,
      onChange: this.handleIdsCheckChange.bind(this, index)
    }), React.createElement("img", {
      src: item.src,
      alt: "",
      width: "100%"
    }))));
    return React.createElement("div", {
      className: "App mt-4"
    }, React.createElement("div", {
      className: "container"
    }, React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "title",
      className: "col-3 col-form-label text-left"
    }, "\u6807\u9898"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("input", {
      value: this.state.title,
      type: "text",
      id: "title",
      className: "form-control",
      onChange: this.handleTitleChange
    }))), React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "price",
      className: "col-3 col-form-label text-left"
    }, "\u4EF7\u683C"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("input", {
      type: "text",
      value: this.state.price,
      id: "price",
      className: "form-control"
    }))), React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "Freight",
      className: "col-3 col-form-label text-left"
    }, "\u8FD0\u8D39"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("input", {
      type: "text",
      id: "Freight",
      className: "form-control"
    }))), React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "Item",
      className: "col-3 col-form-label text-left"
    }, "\u8D27\u53F7"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("input", {
      type: "text",
      id: "Item",
      className: "form-control"
    }))), React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "link",
      className: "col-3 col-form-label text-left"
    }, "\u91C7\u8D2D\u94FE\u63A5"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("input", {
      type: "text",
      id: "link",
      value: this.state.link,
      className: "form-control"
    }))), React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "similar-link",
      className: "col-3 col-form-label text-left"
    }, "\u4E0B\u56FE\u94FE\u63A5"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("input", {
      type: "text",
      id: "similar-link",
      className: "form-control"
    }))), React.createElement("div", {
      className: "form-group row"
    }, React.createElement("label", {
      htmlFor: "props",
      className: "col-3 col-form-label text-left"
    }, "\u5C5E\u6027"), React.createElement("div", {
      className: "col-9"
    }, React.createElement("textarea", {
      id: "props",
      value: this.state.sku,
      className: "form-control"
    }))), React.createElement("div", {
      className: "form-check clearfix"
    }, React.createElement("label", {
      className: "form-check-label float-left h2"
    }, React.createElement("input", {
      type: "checkbox",
      className: "form-check-input",
      checked: this.state.checkAll,
      onChange: this.handleCheckAll
    }), "\u8F6E\u64AD\u56FE\u7247")), React.createElement("div", {
      className: "row"
    }, list), React.createElement("div", {
      className: "form-check clearfix"
    }, React.createElement("label", {
      className: "form-check-label float-left h2"
    }, React.createElement("input", {
      type: "checkbox",
      className: "form-check-input",
      checked: this.state.checkDetailAll,
      onChange: this.handleDetailCheckAll
    }), "\u8BE6\u60C5\u56FE\u7247")), React.createElement("div", {
      className: "row"
    }, detailList), React.createElement("div", {
      className: "form-check clearfix"
    }, React.createElement("label", {
      className: "form-check-label float-left h2"
    }, React.createElement("input", {
      type: "checkbox",
      className: "form-check-input",
      checked: this.state.checkIdsAll,
      onChange: this.handleIdsCheckAll
    }), "IDS")), React.createElement("div", {
      className: "row"
    }, txtList), React.createElement("div", {
      className: "row pt-3"
    }, React.createElement("div", {
      className: "col-4 text-left pl-2 ml-4"
    }, React.createElement("button", {
      className: "btn btn-success btn-sm",
      onClick: this.download
    }, "\u4E0B\u8F7D\u56FE\u7247")), React.createElement("div", {
      className: "col-4"
    }, React.createElement("button", {
      className: "btn btn-success btn-sm",
      onClick: this.exportTxt
    }, "\u5BFC\u51FAID")))));
  }

}

chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
  let allParam = request;
  ReactDOM.render(React.createElement(App, {
    all: allParam
  }), document.getElementById('app'));
});
getCurrentTabId(setRed);
